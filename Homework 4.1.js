console.log('number' + 3 + 3) // В даному прикладі буде number33. Відбулась конкатиняція string з number. Конкатинація відбувається саме при + починаючи зліва на право. В нашому випадку починається зі string

console.log(null + 3); // В даному прикладі буде 3 бо null це 0. JS завжди намагається привести все до числа

console.log(5 && "qwerty"); // Буде qwerty, бо маємо два true і відповідно відобразиться "qwerty". Оператор && повертає перше значення, яке є false, або останнє значення, якщо всі значення є true

console.log(+'40' + +'2' + "hillel"); // Тут буде 42hillel. Спочатку String приведеться до числа і ми отримаємо 40+2, далі відбудеться конкатинація і отримаємо 42hillel

console.log('10' - 5 === 6); //Відповідь буде false, оскільки String стане числом, тобто 10 - 5. Далі буде false оскільки 5 не дорівнює 6

console.log(true + false); // Тут буде 1, бо як js завжди намагається привести все до числа. True це 1 а false це 0 як ти розповідав на уроці

console.log('4px' - 3); // Це ти теж розповідав і показував окремо на прикладі. Буде NaN бо це значення '4px' ніяк не приведеш до числа

console.log('4' - 3); // В цьому прикладі вже відпрацює приведення до числа бо є 4 без будь яких символів. Тому буде 4-3=1

console.log('6' + 3 ** 0); // Буде конкатинація рядка, бо будь яке число в 0 степені буде 1. Відповідь 61

console.log(12 / '6'); // Тут аналогічно. 12/6 = 2 бо 6 перетворилось в число

console.log('10' + (5 === 6)); // Спочатку виконується те що в душках. Тобто буде false і відбудеться конкатинація 10false, бо вираз починається зі String та оператором додавання ('10' +)

console.log(null == ''); // Буде false, бо null не може бути пустим рядком. Тільки null або undefined. Це особливість JS

console.log(3 ** (9 / 3)); // Спочатку буде 9/3=3, потім 3 в 3-й степені це 27

console.log(!!'false' == !!'true'); // Відповідь true, бо !! буде приводити String 'false' та 'true' до буліан. В нашому кейсі String обидва будуть true а оператор порівняння == перевіряє рівність двох булевих значень і ми отримаємо true через рівність

console.log(0 || '0' && 1); // Відповідь 1 бо 0 це false || true('0' && 1) = true тобто 1. Оскільки 1 є першим правдивим значенням, оператор || поверне 1

console.log((+null == false) < 1); // Null це 0 і в цій умові 0==false це true. А true < 1 буде false, бо 1 не більше 1

console.log(false && true || true); // Оператори && і || мають вищий пріоритет, тому це дорівнює false || true, що дає true

console.log(false && (false || true)); // Відповідь false, бо (false || true) = true а false && true = false

console.log((+null == false) < 1 ** 5); // 1 ** 5 дорівнює 1. Вираз стає true < 1, що дає false бо 1 не більше 1